classdef nexus < handle
    % nexus data class. Let's you load in neuronexus data into a class
    % object for analysis or data inspection
    %
    % Class constructor: scanpix.nexus
    % Construct class obj
    %
    % Usage:
    %       obj = scanpix.nexus;
    %       obj = scanpix.nexus(prmsMode);
    %       obj = scanpix.nexus(prmsMode, uiFlag);
    %
    % Inputs:
    %       prmsMode: 'default' - uses default parameter (default)
    %                 'ui'      - opens UI dialogue
    %                 'file'    - load params from file
    %
    %         uiFlag: true (default) or false
    %                 - if false will skip UI dialogue for data selection
    %                   (e.g. when you use constructor programmatically)
    %
    %  IV
    %% PROPERTIES
    properties % params % -from npix obj
        % Map object
        params                containers.Map
        chanMap               struct
    end
    
    properties % meta data % -from npix obj
        dataPath(1,:)         string
        dataSetName(1,:)      char
        trialNames(1,:)       string
        cell_ID(:,4)          double %{mustBePositive, mustBeNonNan, mustBeNonzero}
        cell_Label(:,1)       string
    end
    
    properties % trial data % -from dacq obj
        trialMetaData(1,:)    struct  % leave non-scalar as many fields and indexing into it, is not required very often
        posData               struct  = struct('XYraw',[],'XY',[],'direction',[],'speed',[],'linXY',[]);
        spikeData             struct  = struct('spk_Times',[],'spk_waveforms',[],'sampleT',[]);
        lfpData               struct  = struct('lfp',[],'lfpHighSamp',[],'lfpTet',[]);% this is from dacq - need to decide where I'm getting lfp from - IV
    end

    properties % maps % - from dacq obj
        maps                  struct  = struct('rate',[],'spike',[],'pos',[],'dir',[],'sACs',[],'OV',[],'speed',[]);
        linMaps               struct  = struct('linRate',[],'linPos',[],'linRateNormed',[]);
    end
    
    properties(Hidden)
        fileType              char    = '.set';
        uniqueCellIndex(:,1)  logical % this line is commented out in the npix bit 
        fields2spare          cell    = {'params','dataSetName','cell_ID','cell_Label'};  % spare this when deleting or rearranging data. make sure to add new properties that should be spared here!
        mapParams             struct  = scanpix.maps.defaultParamsRateMaps; 
        loadFlag              logical = false;                               % flag so we know something has been loaded into object
        badChans              %npix only 
    end
    %% METHODS
    
    % constructor %
    methods
    %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
    function obj = nexus(prmsMode,uiFlag)
            % nexus - creates class object 
            %
            % Syntax:  
            %       obj = nexus;
            %       obj = nexus(prmsMode);
            %       obj = nexus(prmsMode, uiFlag);
            %
            % Inputs:
            %    prmsMode - 'default' - uses default parameter (default)
            %               'ui'      - opens UI dialogue
            %               'file'    - load params from file
            %    uiFlag   - true (default)/false - skip UI set file
            %               selection dialogue if false
            %
            % Outputs:
            %    obj      - nexus object
            %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

            
            if nargin == 0
                obj.params = scanpix.helpers.getParams(obj,'default');
                uiFlag     = true;
            else
                obj.params = scanpix.helpers.getParams(obj, prmsMode);
                if nargin < 2
                    uiFlag     = true;
                end
            end
            
            if isempty(obj.params)
                warning('scaNpix: No params selected. Using defaults.');
                obj.params = scanpix.helpers.defaultParamsContainer(class(obj));
            end

            if uiFlag
                [obj.trialNames, obj.dataPath] = scanpix.helpers.fetchFileNamesAndPath(obj.fileType, obj.params('defaultDir'));
                if isempty(obj.trialNames); return; end
                scanpix.helpers.selectTrials(obj.trialNames, obj);
            end
            
            if ~isempty(obj.dataPath)
                obj.params('defaultDir') = [fileparts(obj.dataPath{1}) filesep];  % use parent directory rather than absolut as this makes more sense for multiple trial data
            end
        end
    end
    
end 